[{"uri":"https://docs.water-gis.com/en/concept/","title":"Concept","tags":[],"description":"","content":"Chapter 1 1. Concept  To enable small organizations like water services provider to share and utilize their GIS data easily. To make operation \u0026amp; maintenance of vector tiles at the lowest cost as much as possible.  2. Why did I develop this tool? After collecting GIS data of water, most water services providers in Africa often failed to share and utilize the data because of limited budget and know-how. As a result, the GIS data will not be up-to-date at all. They will need to collect the same GIS data again after several years. It is not efficient actually.\nI have been looking for a way to keep their motivation to maintain the data continuously by having the water GIS data widely used through WebGIS. Recently, I became involved in a technology called vector tiles, then I developed this open source tool for water services providers.\n3. Benefit of using Vector Tiles in water services providers  To establish the effective way to share and utilize GIS data with all staffs after data collection To utilize GIS data more in order to make waterworks efficiency To use GIS data for all type of waterworks in utility (NOT ONLY for NRW and water distribution)  4. Current situation for utilizing GIS in water services providers GIS is very useful tool in order to make daily waterworks effective, and nowadays most of water utilities started to use GIS.\nHowever, there are some challenges usually:\n Very limited access to GIS data Requires high level skill of GIS for utilizing, it is quite difficult to use. It costs too much to procure GIS software and provide trainings Poor internet connection interrupt to share data via internet  In order to solve such as above situation, I recommend that you introduce vector tiles that can operate GIS data more sustainably and at low cost as open source and open data.\n5. Utilize Open Source \u0026amp; Open Data If we use open source software and make the data be at public domain, operational costs will be free of charge up to a certain usage. This makes it a good option for small oranizations which want to operate at a low cost.\n To use FOSS4G (Free \u0026amp; Open Source Software for Geospatial) software such as QGIS, PostGIS.  Significantly lower cost than proprietary products such as ArcGIS   Implement serverless by using Gihub Pages  Easy to implement because no GIS server is needed   To use WebGIS which has user friendly interface like Google Map  WebGIS does not need the advanced skills which is required for ArcGIS and QGIS. Minimize the cost of training by using WebGIS   To use vector tiles for data distribution  It is significantly lighter and less expensive to generate vector tiles than raster tiles such as WMS and TMS. More stable and faster than dynamic vector data distribution such as WFS.    6. Possibilities to utilize vector tiles in water services providers For instance, the following are possible uses:\n It can be effectively used as a measure against Non-Revenue Water (NRW). Plumbers can easily access vect tiles before constructing their waterworks to get a more efficient view of what\u0026rsquo;s going on in the field. Meter readers can use vector tiles in the field to more efficiently read meters. Customer care can use vector tiles when dealing with clients. It can lead to more appropriate responses and customer satisfaction. Manager can use vector tiles effectively for future planning of water networks, as well as for briefing and sharing with stakeholders like the Government and financial institubion. By making it open data, data can be shared with people outside the water sector. There are various possibilities and synergistic effects in the future, such as collaboration with private companies.  However, there are few examples of water supply data being used as open data at the moment. Therefore, how to utilize water supply vector tiles needs to be explored through trial and error.\nHow you utilize it is completely up to your organization!\n"},{"uri":"https://docs.water-gis.com/en/setups/","title":"Setups","tags":[],"description":"","content":"Chapter 2 This chapter is going to explain what is required for vectortiles implementation, and how to host your vectortiles on Github pages as open data.\n"},{"uri":"https://docs.water-gis.com/en/setups/preparation/","title":"Preparations","tags":[],"description":"","content":"The following requirements must be implemented before developing vectortiles in your water services providers.\n"},{"uri":"https://docs.water-gis.com/en/setups/preparation/install_postgis/","title":"Install PostgresSQL/PostGIS database","tags":[],"description":"","content":"This vectortiles toolkit uses PostgreSQL/PostGIS database. So, please try to install it in your computer.\n PostgreSQL PostGIS  If you will install new one, I think you can install PostgreSQL12 and PostGIS3. I recommend to use at least more than PostgreSQL11 and PostGIS2.5.\n"},{"uri":"https://docs.water-gis.com/en/setups/preparation/data_collection/","title":"Data Collection and Import data into PostGIS database","tags":[],"description":"","content":"If you don\u0026rsquo;t have any GIS data yet, you must go to data collection first. You might need some GPS devices such as Trimble or Garmin. But you can also use following smartphone applications for data collection.\n QField for QGIS: It works on Android. Input: It works on both iOS and Android.  Both applications are free and open source, it is completely compatible to QGIS. However, I personally recomment to use QField which is more advanced and user friendly.\nYou can also have a look about nice case study of QField in rural water supply systems in Rwanda from here.\nIf you need some assists about data collection, please let me know.\n"},{"uri":"https://docs.water-gis.com/en/setups/preparation/install_docker/","title":"Install Docker","tags":[],"description":"","content":"This toolkit uses Docker to generate vectortiles from PostGIS database in order to use tippecanoe tool. So, please install Docker in your computer.\nDocker Desktop on Windows See official webpage to install it.\n Please make sure you selected Linux container(Windows container is incorrect!) Please enable your Hyper-V in your computer.  Docker Desktop on MacOS See official webpage to install it by Homebrew.\nbrew search docker brew cask install docker Docker on Ubuntu See official webpage to install it.\nHowever, if it is Linux, you don\u0026rsquo;t actually need to install Docker. You can directly install tippecanoe on ubuntu to use these tools.\n"},{"uri":"https://docs.water-gis.com/en/setups/installation/","title":"Installation","tags":[],"description":"","content":"In this section, we will show you how to generate vector tiles.\nFirst of all, you can understand our toolkit\u0026rsquo;s whole procedures in the below image.\nSystem Diagram Sequence Diagram of vectortiles production in the toolkits sequenceDiagram participant db as PostGIS participant user as User participant vt as vt participant style as mapbox-stylefiles participant mapbox as Mapbox Studio participant action as Github Actions participant ghpages as gh-pages db-vt: GeoJSON Note over vt: tippecanoe vt-user: mbtiles user-mapbox: Upload mbtiles mapbox-mapbox: Edit Mapbox Stylefiles Note over mapbox: Stylefile editing db-vt: GeoJSON Note over vt: Once stylefile is ready vt-action: Upload mbtiles action-ghpages: Vector tiles(pbf/mvt) Note over action: Build \u0026 Deploy mapbox-user: Download Mapbox Stylefiles and SVG icons user-user: Edit Stylefiles for gh-pages user-style: generate Stylefiles user-style: generate sprite files style-ghpages: Deploy Style files and Sprite files user--user: Develop Web app by Mapbox GL JS user-action: Upload HTML/JavaScript action-ghpages: HTML/JavaScript Note over action: Build \u0026 Deploy  Next Now, we are going to see detailly how to implement your own vectortiles.\n"},{"uri":"https://docs.water-gis.com/en/setups/installation/create_vt_repository/","title":"Create repository for vectortiles","tags":[],"description":"","content":"Create your vt repository from vt-boilerplate template repository  click use this template on watergis/vt-boilerplate. select your organization and name vt for new repository.  After creating your own vt repository, you will work on this repository from next step. All the modules are included and packaged under vt-boilerplate. However, if you want to use some modules seperately, you can just use it.\n"},{"uri":"https://docs.water-gis.com/en/setups/installation/create_mbtiles/","title":"Create mbtiles from PostGIS","tags":[],"description":"","content":"Create mbtiles from PostGIS (work on vt)  watergis/postgis2mbtiles : This module will create mbtiles by GeoJSON data which is retrieved from PostGIS. this module is using mapbox/tippecanoe, so please use Docker to generate mbtiles if your machine is Windows. But you can use the module directly in MacOS or Ubuntu machine. watergis/postgis2mbtiles-docker is the source code for Docker implementation.  First of all, you need to make SQL queries for each layer on config.js, so postgis2mbtiles tool will extract required data from PostGIS and a mbtiles will be created.\nBasic settings for a layer The below is a typical example to extract GeoJSON from PostGIS.\n{ name: \u0026#39;pipeline\u0026#39;, //specify your layer name  geojsonFileName: __dirname + \u0026#39;/pipeline.geojson\u0026#39;, //specify geojson name for temporary use  select: ` SELECT row_to_json(featurecollection) AS json FROM ( SELECT \u0026#39;FeatureCollection\u0026#39; AS type, array_to_json(array_agg(feature)) AS features FROM ( SELECT \u0026#39;Feature\u0026#39; AS type, ST_AsGeoJSON(ST_MakeValid(x.geom))::json AS geometry, row_to_json(( SELECT t FROM ( SELECT 14 as maxzoom, 11 as minzoom ) AS t )) AS tippecanoe, row_to_json(( SELECT p FROM ( SELECT x.pipe_id as fid, x.material, x.pipe_size, x.pressure, x.construction_year, x.rehabilitation_year, x.input_date ) AS p )) AS properties FROM pipeline x WHERE NOT ST_IsEmpty(x.geom) ) AS feature ) AS featurecollection ` } There is a special configuration for tippecanoe to set minimum zoom level and maximum zoom level.\nrow_to_json(( SELECT t FROM ( SELECT 14 as maxzoom, 11 as minzoom ) AS t )) AS tippecanoe, If your coordinates is not EPSG:4326(WGS84), you must transform your coordinate reference system by below SQL.\nST_TRANSFORM(geom,4326) Usecases Making your own SQLs for your database, this step is quite significant. However, it might have some difficulties to create SQLs. For your reference, you can have a look of following two water supply providers' setting.\n Narok Water and Sewerage Services Co., Ltd, KENYA : config.js Water and Sanitation Corporation, Ltd, RWANDA : config.js Nakuru Water and Sanitation Services Co., Ltd, KENYA : config.js  Because this approach can use SQL language to directly extract the data from PostGIS, it can be very frexiblely to adopt any water services providers' GIS database.\nExamples of Vectortiles Design The design of vectortiles depends on your GIS database and your needs. The below designs are just an example of vectortiles implementation for your reference.\n Vectortiles Design for Narok water, Kenya Vectortiles Design for WASAC, Rwanda  "},{"uri":"https://docs.water-gis.com/en/setups/installation/design_stylefile/","title":"Design Mapbox Style","tags":[],"description":"","content":"Design your Mapbox Style on Mapbox Studio Next step is to design your own Mapbox Style on Mapbox Studio by using mbtile which was produced before.\nFor better designs of beautiful water maps, you might need to design your own icons for your layers. You may use the following icons for your reference.\n Narok Water and Sewerage Services Co., Ltd, KENYA : narwassco/water-icons Water and Sanitation Corporation, Ltd, RWANDA : WASAC/water-icons Nakuru Water and Sanitation Services Co., Ltd, KENYA : nakuruwater/water-icons  You may need to create an account of Mapbox Studio. Also, please keep your public accessToken as well.\nYou can see official manual of Mapbox Studio here.\nYou may need to repeat process of genrating mbtiles and styling in Mapbox Studio for finalying your stylefiles.\nHowever, Mapbox Studio has limitation to use third party vector tiles sources. So you can also use Maputnik Editor for this purpose.\nDesign your Mapbox Style on Maputnik Editor Once you created your Mapbox Style, it is easier to use Maputnik Editor to modify your style. It is free to use online. You can use any third party vector tiles sources.\n"},{"uri":"https://docs.water-gis.com/en/setups/installation/deploy_vectortiles/","title":"Deploy vectortiles to gh-pages","tags":[],"description":"","content":"Deploy Vector Tile to gh-pages (work on vt) Once your stylefiles' design and mbtiles are completed, now you are ready to deploy your vector tiles to gh-pages. postgis2vectortiles will assist you to create and deploy vector tiles.\nThere are two cases for deploying.\ngraph LR A[mbtiles] -- B{Is your coverage area large?} B --|No|C[narwassco/vt-map] B --|Yes|D[wasac/vt] C --|produce tiles locally|E[gh-pages] D --|upload mbtiles|F[github master branch] F --|produce tiles by Github Actions|E  i. [narwassco/vt-map approach] A case of Narok Water, Kenya If your coverage area is small, you can use the approach of Narok Water to deploy. Please have a look following repository.\n narwassco/vt-map This module will use the following submodules to create Mapbox Vector Tile for deployment to gh-pages.  watergis/postgis2mbtiles: It creates mbtiles from PostGIS. watergis/mbtiles2pbf: It converts from mbtiles to pbf(mvt) tiles.    This module uses mapbox/tippecanoe for producing mbtiles. However, Narok water\u0026rsquo;s GIS computer is Windows 10 Pro, so it is not easy to run tippecanoe, I developed Docker to create Mapbox Vector Tile.\nii. [WASAC/vt approach] A case of WASAC, Rwanda (Recommended) If your coverage area is huge, I am afraid it is not easy to deploy thousands of vector tiles to Github pages. So you can use WASAC approach to deploy mbtiles first, then use Github Actions to extract vector tiles from your mbtiles. You can see the following repository for your reference.\n WASAC/vt This module will use the following submodules to create Mapbox Vector Tile for deployment to gh-pages.  watergis/postgis2mbtiles: It creates mbtiles from PostGIS. postgis2mbtiles module will run on your local computer. watergis/mbtiles2pbf: It converts from mbtiles to pbf(mvt) tiles. mbtiles2pbf will run on Github Actions.    The below is a workflow file of Narok Water to automate deploy pbf files from mbtiles by Github Actions.\nname: Node.js CI on: push: branches: [ master ] jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Use Node.js uses: actions/setup-node@v1 with: node-version: 12.x - run: npm ci env: NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}} - run: npm run extract - name: configure git and deploy env: NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}} run: |git config --global user.name \u0026#34;narwassco+githubci\u0026#34; git config --global user.email \u0026#34;narwassco+githubci@users.noreply.github.com\u0026#34; git remote set-url origin https://x-access-token:${NODE_AUTH_TOKEN}@github.com/narwassco/vt.git npm run deploy   Narok Water also started using [WASAC/vt approach] instead [narwassco/vt-map approach].\n narwassco/vt    Nakuru Water also started using [WASAC/vt approach].\n nakuruwater/vt    In case data size exceeds more than capacity of Github Pages Github Pages has limitation of usage maximum 1GB storage. If your data exceeds that limit, it is not possible to deploy to gh-pages.\nHowever, you may have another option to use Netlify.\nIn Rwanda, we wanted to include parcels data as base map. Parcels in the whole Rwanda is originally 8GB in shapefile. After converting to pbf vector tiles, total size of tiles became 1.2GB. But we successfully managed to deploy parcels by usign Netlify.\nYou can have a look the below repository how we deployed huge vector tiles to Netlify.\n WASAC/vt-parcels-2020: Letest parcels as of 21 July 2020 WASAC/vt-parcels: Old parcels vector tiles before 2019(we are not sure exact surveyed date)  Because parcels data is huge, we could not extract GeoJSON from PostGIS and to use tippecanoe. Thus in this case, we directly extract pbf tiles from PostGIS by using watergis/mvt-generator module. It is quite different approach from what vt repository do.\n"},{"uri":"https://docs.water-gis.com/en/setups/installation/deploy_stylefile_sprite/","title":"Deploy Mapbox Stylefiles and Sprite files to gh-pages","tags":[],"description":"","content":"Deploy Mapbox Stylefiles and Sprite files on gh-pages   watergis/sprite-creater : This module will assist you to create sprite files from your icons.\n  Please create a repository which can be named mapbox-stylefiles. You can organize stylefiles and sprite files as following structures.\n  |- docs |- satellite |- sprite |- sprite.json |- sprite.png |- sprite@2x.json |- sprite@2x.png |- sprite@4x.json |- sprite@4x.png |- style.json |- street |- sprite |- sprite.json |- sprite.png |- sprite@2x.json |- sprite@2x.png |- sprite@4x.json |- sprite@4x.png |- style.json |- src |- config.js |- sprite-create.js Use cases There are the following use cases. You may fork one of the repositories and adopted to your own needs.\n Narok Water and Sewerage Services Co., Ltd, KENYA : narwassco/mapbox-stylefiles Water and Sanitation Corporation, Ltd, RWANDA : WASAC/mapbox-stylefiles Nakuru Water and Sanitation Services Co., Ltd, KENYA : nakuruwater/mapbox-stylefiles  Create sprite files from your icons The Spritefiles will be generated from mapbox/maki icons and water-icons icons under docs of this repository. UNVT basemap is using mapbox/maki icons. In Narok Water\u0026rsquo;s case, the following repositories manage our icons which are being used in our style files.\n narwassco/water-icons : It includes our own customized icon for water assets. narwassco/mapbox-street-icons : It includes icons of Mapbox Street style. narwassco/mapbox-satellite-icons:It includes icons of Mapbox Satellite style.  Put your Mapbox Stylefiles You can download your Mapbox Stylefiles from Mapbox Studio, then you can delete unnecessary contents from the stylefile, and changed url of vector tile and sprite file on it.\nParticulally, you must change sources, sprite and glyphs properties as follows.\n\u0026#34;sources\u0026#34;: { \u0026#34;composite\u0026#34;: { \u0026#34;url\u0026#34;: \u0026#34;mapbox://mapbox.mapbox-streets-v8,mapbox.mapbox-terrain-v2\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;vector\u0026#34; }, \u0026#34;assets\u0026#34;: { \u0026#34;attribution\u0026#34;: \u0026#34;©NARWASSCO,Ltd.\u0026#34;, \u0026#34;minzoom\u0026#34;: 10, \u0026#34;maxzoom\u0026#34;: 16, \u0026#34;tiles\u0026#34;: [ \u0026#34;https://narwassco.github.io/vt/tiles/{z}/{x}/{y}.mvt\u0026#34; ], \u0026#34;type\u0026#34;: \u0026#34;vector\u0026#34; } }, \u0026#34;sprite\u0026#34;: \u0026#34;https://narwassco.github.io/mapbox-stylefiles/street/sprite/sprite\u0026#34;, \u0026#34;glyphs\u0026#34;: \u0026#34;mapbox://fonts/narwassco/{fontstack}/{range}.pbf\u0026#34;, Then, you are going to layers properties to change source name.\n{ \u0026#34;id\u0026#34;: \u0026#34;intake\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;fill\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;assets\u0026#34;, \u0026#34;source-layer\u0026#34;: \u0026#34;plant\u0026#34;, \u0026#34;minzoom\u0026#34;: 10, \u0026#34;filter\u0026#34;: [\u0026#34;match\u0026#34;, [\u0026#34;get\u0026#34;, \u0026#34;plant_type\u0026#34;], [\u0026#34;INTAKE\u0026#34;], true, false], \u0026#34;layout\u0026#34;: {}, \u0026#34;paint\u0026#34;: { \u0026#34;fill-color\u0026#34;: \u0026#34;hsl(0, 18%, 85%)\u0026#34;, \u0026#34;fill-outline-color\u0026#34;: \u0026#34;hsl(0, 8%, 6%)\u0026#34;, \u0026#34;fill-opacity\u0026#34;: 0.6 } } "},{"uri":"https://docs.water-gis.com/en/setups/installation/develop_mapbox_gl_js/","title":"Develop and Deploy Web Application","tags":[],"description":"","content":"You can use Mapbox GL JS to develop your own web application and delopy it to gh-pages.\nUse boilerplate to create your repository watergis/mapboxgljs-boilerplate is the template of Mapbox GL JS implementation for Water Services Providers with all of customized plugins. You can use this template to create your own repository easily.\nFork an existing repository to your organization It is also possible for you to fork our water services providers' application.\n Narok Water and Sewerage Services Co., Ltd, KENYA : narwassco/mapbox-gl-js-client Water and Sanitation Corporation, Ltd, RWANDA : WASAC/mapbox-gl-js-client Nakuru Water and Sanitation Services Co., Ltd, KENYA : nakuruwater/mapbox-gl-js-client  Customized Mapbox GL JS Plugins for this toolkit. I developed the following plugins for the web application for water services providers. All the plugins are already included in mapbox-gl-js-client repository for Narok Water and WASAC.\n watergis/mapbox-gl-export watergis/mapbox-gl-legend watergis/mapbox-gl-area-switcher watergis/mapbox-gl-pitch-toggle-control watergis/mapbox-gl-popup  Automating deployment process for web application Both Narok water and WASAC\u0026rsquo;s applications are using Github Action to deploy the application to gh-pages automatically. You can also use Circle CI or Github Actions to automate.\nGithub Action\u0026rsquo;s workflow file is here. You also need to register environmental variable on secret page on setting.\n ACCESSTOKEN : Your Mapbox Access Token CNAME : Your custom domain like narok.water-gis.com. If you don\u0026rsquo;t have own domain, you don\u0026rsquo;t need to put CNAME.  The below is an example of Github Action\u0026rsquo;s workflow file\nname: Node.js CI on: push: branches: [ master ] jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Use Node.js uses: actions/setup-node@v1 with: node-version: 12.x - run: npm ci env: NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}} - name: configure git, build and deploy env: NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}} ACCESSTOKEN: ${{secrets.ACCESSTOKEN}} CNAME: ${{secrets.CNAME}} run: |echo \u0026#34;ACCESSTOKEN=${ACCESSTOKEN}\u0026#34; \u0026gt; .env echo \u0026#34;CNAME=${CNAME}\u0026#34; \u0026gt;\u0026gt; .env npm run build git config --global user.name \u0026#34;narwassco+githubci\u0026#34; git config --global user.email \u0026#34;narwassco+githubci@users.noreply.github.com\u0026#34; git remote set-url origin https://x-access-token:${NODE_AUTH_TOKEN}@github.com/narwassco/mapbox-gl-js-client.git npm run deploy "},{"uri":"https://docs.water-gis.com/en/setups/terrain-rgb/","title":"Development of Terrain RGB","tags":[],"description":"","content":"In this section, we are going to develop terrain RGB raster tileset and to include it to our own web app.\nThrough this session, you will be able to learn;\n How to create Terrain RGB from DEM How to host it to Github pages How to style terrain RGB in your Mapbox style How to add elevation plugin to your app  Next Now, we are going to create own terrain RGB raster tileset from DEM.\n"},{"uri":"https://docs.water-gis.com/en/operation/","title":"Operations","tags":[],"description":"","content":"Chapter 3 This chapter will show you how to operate vector tiles daily.\n"},{"uri":"https://docs.water-gis.com/en/operation/automation_updating/","title":"Automate data up to date","tags":[],"description":"","content":"Automate the process of deployment (work on vt) You can use Task Scheduler of Windows or crontab of Linux to automate your deployment process to be implemented frequently. So you can just concentrate to maintain GIS database.\nThere is create_vt.bat and create_vt.sh under vt-boilerplate repository. You can automate to launch this script by using Task Scheduler or crontab.\n"},{"uri":"https://docs.water-gis.com/en/setups/terrain-rgb/create_terrainrgb/","title":"Create Terrain RGB tile from DEM","tags":[],"description":"","content":"In this section, we are going to develop terrain RGB raster tileset from your own DEM.\nHere, we will use 10m DEM which is owned by WASAC in Rwanda as an example. The below is a sample image of Rwanda DEM on QGIS.\n1. Trasform projection of DEM to EPSG:3857 First, you must transform the projection of your DEM to Web Mercator (EPSG:3857) by using QGIS or GDAL tool.\n2. Setup dem2terrainrgb tool in your computer For converting your DEM to terrain RGB raster tile, you must use several commands as follows.\n Resetting the value for No Data RGB-ify DEM data Create raster tilsets  But I already develop a simple pythion script to create terrain RGB tile from DEM. Before installing this tool, please make sure you have installed Python3.9 and GDAL3.2.0 in your machine.\nFor installation, you just do the below commands.\ngit clone https://github.com/watergis/dem2terrainrgb.git cd dem2terrainrgb pipenv install Put your DEM under data folder.\nmkdir data mv ~/rwanda_dem_EPSG3857_10m.tif data/. 3. Create Terrain RGB raster tilesets Now, we run the tool to convert DEM to tilesets.\npipenv shell python main.py --dem ./data/rwanda_dem_EPSG3857_10m.tif --dist ./tiles Terrain RGB raster tilesets are normally generated between zoom level 5 and 15. So this process might take a bit time to complete.\nfilled NODATA value successfully: ./tmp/rwanda_dem_EPSG3857_10m_without_nodata.tif rgbified successfully: ./tmp/rwanda_dem_EPSG3857_10m_RGB.tif created tileset successfully: ./tiles After processing, raster tilesets will be generated under tiles folder.\nHowever, we need to delete all of unnecessary \u0026ldquo;*.xml\u0026rdquo; files as the below command before going to next step.\nfind ./tiles -name \u0026#34;*.xml\u0026#34; -exec bash -c \u0026#39;rm \u0026#34;$1\u0026#34;\u0026#39; - \u0026#39;{}\u0026#39; \\; 4. Check terrain RGB raster tilesets All of tiles will be created under tiles folder.\nGDAL2tiles generated some example source code for leaflet and openlayers. You may double-click openlayers.html to check it on your browser.\n5. Validate processed file This tool will generated 2 tiff image under tmp folder. First, we can validate these files.\n validate rwanda_dem_EPSG3857_10m_without_nodata.tif  This geotiff image was filled value instead of No Data.\n$ rio info --indent 2 ./tmp/rwanda_dem_EPSG3857_10m_without_nodata.tif { \u0026#34;blockxsize\u0026#34;: 256, \u0026#34;blockysize\u0026#34;: 256, \u0026#34;bounds\u0026#34;: [ 3223733.0877, -316437.17616185057, 3439718.7685284764, -115768.6321 ], \u0026#34;colorinterp\u0026#34;: [ \u0026#34;gray\u0026#34; ], \u0026#34;compress\u0026#34;: \u0026#34;deflate\u0026#34;, \u0026#34;count\u0026#34;: 1, \u0026#34;crs\u0026#34;: \u0026#34;EPSG:3857\u0026#34;, \u0026#34;descriptions\u0026#34;: [ null ], \u0026#34;driver\u0026#34;: \u0026#34;GTiff\u0026#34;, \u0026#34;dtype\u0026#34;: \u0026#34;uint16\u0026#34;, \u0026#34;height\u0026#34;: 19992, \u0026#34;indexes\u0026#34;: [ 1 ], \u0026#34;interleave\u0026#34;: \u0026#34;band\u0026#34;, \u0026#34;lnglat\u0026#34;: [ 29.92940323722318, -1.9409140983431143 ], \u0026#34;mask_flags\u0026#34;: [ [ \u0026#34;all_valid\u0026#34; ] ], \u0026#34;nodata\u0026#34;: null, \u0026#34;res\u0026#34;: [ 10.037442179964515, 10.037442179964515 ], \u0026#34;shape\u0026#34;: [ 19992, 21518 ], \u0026#34;tiled\u0026#34;: true, \u0026#34;transform\u0026#34;: [ 10.037442179964515, 0.0, 3223733.0877, 0.0, -10.037442179964515, -115768.6321, 0.0, 0.0, 1.0 ], \u0026#34;units\u0026#34;: [ null ], \u0026#34;width\u0026#34;: 21518 }  validate rwanda_dem_EPSG3857_10m_RGB.tif  This geotiff image was already rgb-ified by raster io module. You can check by the below command.\n$ rio info --indent 2 ./tmp/rwanda_dem_EPSG3857_10m_RGB.tif We can see now there is 3 bands color.\n{ \u0026#34;blockxsize\u0026#34;: 256, \u0026#34;blockysize\u0026#34;: 256, \u0026#34;bounds\u0026#34;: [ 3223733.0877, -316437.17616185057, 3439718.7685284764, -115768.6321 ], \u0026#34;colorinterp\u0026#34;: [ \u0026#34;red\u0026#34;, \u0026#34;green\u0026#34;, \u0026#34;blue\u0026#34; ], \u0026#34;compress\u0026#34;: \u0026#34;deflate\u0026#34;, \u0026#34;count\u0026#34;: 3, \u0026#34;crs\u0026#34;: \u0026#34;EPSG:3857\u0026#34;, \u0026#34;descriptions\u0026#34;: [ null, null, null ], \u0026#34;driver\u0026#34;: \u0026#34;GTiff\u0026#34;, \u0026#34;dtype\u0026#34;: \u0026#34;uint8\u0026#34;, \u0026#34;height\u0026#34;: 19992, \u0026#34;indexes\u0026#34;: [ 1, 2, 3 ], \u0026#34;interleave\u0026#34;: \u0026#34;band\u0026#34;, \u0026#34;lnglat\u0026#34;: [ 29.92940323722318, -1.9409140983431143 ], \u0026#34;mask_flags\u0026#34;: [ [ \u0026#34;all_valid\u0026#34; ], [ \u0026#34;all_valid\u0026#34; ], [ \u0026#34;all_valid\u0026#34; ] ], \u0026#34;nodata\u0026#34;: null, \u0026#34;res\u0026#34;: [ 10.037442179964515, 10.037442179964515 ], \u0026#34;shape\u0026#34;: [ 19992, 21518 ], \u0026#34;tiled\u0026#34;: true, \u0026#34;transform\u0026#34;: [ 10.037442179964515, 0.0, 3223733.0877, 0.0, -10.037442179964515, -115768.6321, 0.0, 0.0, 1.0 ], \u0026#34;units\u0026#34;: [ null, null, null ], \u0026#34;width\u0026#34;: 21518 } If you add rgbified geotiff on QGIS, the image should be as below.\nWe can try to calcurate elevation by certain coordinates from bands values.\nThe formula used to calculate the elevation is\nheight = -10000 + ((R * 256 * 256 + G * 256 + B) * 0.1) We can use gdallocationinfo to query band values by coordinates.\n$ gdallocationinfo -wgs84 ./tmp/rwanda_dem_EPSG3857_10m_RGB.tif 29.7363 -2.2313 Report: Location: (8617P,13218L) Band 1: Value: 1 Band 2: Value: 199 Band 3: Value: 250 (rwanda_terrain) "},{"uri":"https://docs.water-gis.com/en/setups/terrain-rgb/host-terrainrgb-tiles/","title":"Host Terrain RGB tiles on server","tags":[],"description":"","content":"In this section, we are going to host terrain RGB raster tileset which we generated in previous section.\nFor hosting tiles, you will have two choices.\n Host tiles on Github pages Host tiles on your own server  1. Host tiles on Github pages In Rwanda\u0026rsquo;s case, our size of tilesets are below 1GB, so we hosted it on our Github pages.\n Create Github repository  We named rw-terrain as our hosted repository on Github.\n Clone it to your local machine  git clone git@github.com:WASAC/rw-terrain.git cd rw-terrain  Move tiles folder under docs directory.  mkdir docs cd docs mv ../../dem2terrainrgb/data/tiles tiles You may delete unnecessary *.html files from tiles folder.\n Create metadata.json under tiles folder  vi metadata.json { \u0026#34;name\u0026#34;: \u0026#34;Rwanda 10m Terrain RGB Tileset\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Rwanda 10m Terrain RGB Tileset, CC-BY-4.0: Water and Sanitation Corporation (WASAC), Rwanda\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1\u0026#34; }  Create LICENSE file under root directory  We are using Creative Commons Attribution 4.0 International License. You may copy our license file to your repository.\ncd .. wget https://raw.githubusercontent.com/WASAC/rw-terrain/main/LICENSE  Create README.md  Finally, do not forget to write README.md for users. You may modify our [README.md(https://github.com/WASAC/rw-terrain/blob/main/README.md) for your data.\n Configure Github pages  Now, you can push this repository to Github, then please configure Github pages setting.\nYou can access tilesets from the below URL.\nhttps://wasac.github.io/rw-terrain/tiles/{z}/{x}/{y}.png  2. Host tiles on your own server Create mbtiles from raster tilesets If you want to host tilesets on your own server, first you need to create mbtiles container by using mb-utils tool.\nGo back to dem2terrainrgb repository folder.\ncd ~/dem2terrainrgb Then, create metadata.json under tiles directory.\nvi tiles/metadata.json { \u0026#34;name\u0026#34;: \u0026#34;Rwanda 10m Terrain RGB Tileset\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Rwanda 10m Terrain RGB Tileset, CC-BY-4.0: Water and Sanitation Corporation (WASAC), Rwanda\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1\u0026#34; } Finally, you can execute mb-utils to create mbtiles under tilesets folder.\nmb-util --image_format=png --scheme=xyz ./tiles/ ./tilesets/rwanda_dem_EPSG3857_10m.mbtiles Hosting on mbtileserver You may be able to use mbtilesserver.\nAfter installing mbtileserver,\n~/go/bin/mbtileserver --verbose it will automatically find mbtiles under tilesets folder, then access to http://localhost:8000/services. You will see the following response.\n[ { \u0026#34;imageType\u0026#34;: \u0026#34;png\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;http://localhost:8000/services/rwanda_dem_EPSG3857_10m\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Rwanda 10m Terrain RGB Tileset\u0026#34; } ] After that, continue to access http://localhost:8000/services/rwanda_dem_EPSG3857_10m and see more detailed information.\n{ \u0026#34;description\u0026#34;: \u0026#34;Rwanda 10m Terrain RGB Tileset, CC-BY-4.0: Water and Sanitation Corporation (WASAC), Rwanda\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;png\u0026#34;, \u0026#34;map\u0026#34;: \u0026#34;http://localhost:8000/services/rwanda_dem_EPSG3857_10m/map\u0026#34;, \u0026#34;maxzoom\u0026#34;: 15, \u0026#34;minzoom\u0026#34;: 5, \u0026#34;name\u0026#34;: \u0026#34;Rwanda 10m Terrain RGB Tileset\u0026#34;, \u0026#34;scheme\u0026#34;: \u0026#34;xyz\u0026#34;, \u0026#34;tilejson\u0026#34;: \u0026#34;2.1.0\u0026#34;, \u0026#34;tiles\u0026#34;: [ \u0026#34;http://localhost:8000/services/rwanda_dem_EPSG3857_10m/tiles/{z}/{x}/{y}.png\u0026#34; ], \u0026#34;version\u0026#34;: \u0026#34;1\u0026#34; } Tileset URL will be as below.\nhttp://localhost:8000/services/rwanda_dem_EPSG3857_10m/tiles/{z}/{x}/{y}.png You can use QGIS\u0026rsquo;s xyz tile layer funciton to validate your tile hosting.\n"},{"uri":"https://docs.water-gis.com/en/setups/terrain-rgb/utilize-on-mapboxgl/","title":"Utilize Terrain RGB on Mapbox GL JS","tags":[],"description":"","content":"In this section, we are going to use terrain RGB raster tileset on Mapbox GL JS\n1. Add Hillshade layer to your style If you have your own terrain RGB tilesets, it is easier to add hillshade layer to your style.json.\nFirst, add your raster tilesets information to sources like below.\n\u0026#34;sources\u0026#34;: { \u0026#34;rwanda-dem\u0026#34;:{ \u0026#34;type\u0026#34;: \u0026#34;raster-dem\u0026#34;, \u0026#34;tiles\u0026#34;: [ \u0026#34;https://wasac.github.io/rw-terrain/tiles/{z}/{x}/{y}.png\u0026#34; ], \u0026#34;tileSize\u0026#34;: 512, \u0026#34;maxzoom\u0026#34;: 15 } } Then, you can add hillshade layer like this.\n\u0026#34;layers\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;hillshade\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;hillshade\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;rwanda-dem\u0026#34;, \u0026#34;minzoom\u0026#34;: 5, \u0026#34;maxzoom\u0026#34;: 14, \u0026#34;layout\u0026#34;: {}, \u0026#34;paint\u0026#34;: { \u0026#34;hillshade-accent-color\u0026#34;: \u0026#34;#5a5a5a\u0026#34;, \u0026#34;hillshade-exaggeration\u0026#34;: 0.5, \u0026#34;hillshade-highlight-color\u0026#34;: \u0026#34;#FFFFFF\u0026#34;, \u0026#34;hillshade-illumination-anchor\u0026#34;: \u0026#34;viewport\u0026#34;, \u0026#34;hillshade-illumination-direction\u0026#34;: 335, \u0026#34;hillshade-shadow-color\u0026#34;: \u0026#34;#5a5a5a\u0026#34; } } ] You can visit Rwanda\u0026rsquo;s web site to see hillshade style as an example. Change style to UN Vector to compare how it is different from Mapbox\u0026rsquo;s hillshade layer.\n2. Add Elevation plugin to your app In water utilities, elevation is so significant. Thus, I developed a Mapbox GL JS plugin mapbox-gl-elevation. It can query altitude information from terrain RGB raster tilesets.\nYou can install it to your Mapbox GL JS app as follows.\nnpm i @watergis/mapbox-gl-elevation --save Then, add elevation control to Map object. Please specify your tilesets' URL.\nimport MapboxElevationControl from \u0026#34;@watergis/mapbox-gl-elevation\u0026#34;; import \u0026#39;@watergis/mapbox-gl-elevation/css/styles.css\u0026#39;; import mapboxgl from \u0026#39;mapbox-gl\u0026#39;; const map = new mapboxgl.Map(); map.addControl(new MapboxElevationControl( \u0026#39;https://wasac.github.io/rw-terrain/tiles/{z}/{x}/{y}.png\u0026#39;, { font: [\u0026#39;Roboto Medium\u0026#39;], fontSize: 12, fontHalo: 1, mainColor: \u0026#39;#263238\u0026#39;, haloColor: \u0026#39;#fff\u0026#39;, } ), \u0026#39;top-right\u0026#39;); });   See demo from here.\n3. Add 3D view to your app (for Mapbox GL JS v2) If your Mapbox GL JS app already upgraded to v2, you can use terrain RGB to make 3D easily by adding some configurations to your style.json.\nFirst, add your raster tilesets information like below.\n\u0026#34;sources\u0026#34;: { \u0026#34;rwanda-dem\u0026#34;:{ \u0026#34;type\u0026#34;: \u0026#34;raster-dem\u0026#34;, \u0026#34;tiles\u0026#34;: [ \u0026#34;https://wasac.github.io/rw-terrain/tiles/{z}/{x}/{y}.png\u0026#34; ], \u0026#34;tileSize\u0026#34;: 512, \u0026#34;maxzoom\u0026#34;: 15 } }, \u0026#34;terrain\u0026#34;: { \u0026#34;source\u0026#34;: \u0026#34;rwanda-dem\u0026#34;, \u0026#34;exaggeration\u0026#34;: 1.5 }, You can also see detailed information from their official page here.\nIf you want to add sky layer, just add it to layers section of style.json.\n\u0026#34;layers\u0026#34; : [ { \u0026#34;id\u0026#34;: \u0026#34;sky\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;sky\u0026#34;, \u0026#34;paint\u0026#34;: { \u0026#34;sky-type\u0026#34;: \u0026#34;atmosphere\u0026#34;, \u0026#34;sky-atmosphere-sun\u0026#34;: [0.0, 0.0], \u0026#34;sky-atmosphere-sun-intensity\u0026#34;: 15 } } ] See demo from here. Change style to terrain for 3D view.\nNote. recently Mapbox GL JS changed their license from BSD to proprietary license. If your app\u0026rsquo;s usage exceeds their free tier program, Mapbox will charge you some fees according to your usage.\n"},{"uri":"https://docs.water-gis.com/en/operation/costs/","title":"Costs","tags":[],"description":"","content":"Here, we are going to show you how is the actual operation \u0026amp; maintenance costs for vectortiles.\nFirst of all, this vectortiles approach is completely free of charge in most of small organization.\nThis system is fully adopted to GitHub Pages platform.\nThis application can work without server, and Github provides HTTPS secure connection as default. Basically, it costs completely free of charge, you don\u0026rsquo;t need additional fees for operating vectortiles services.\nHowever, there are some limits in GitHub Pages and BaseMap services. We are going to see details from next page.\n"},{"uri":"https://docs.water-gis.com/en/operation/costs/costs_ghpages/","title":"Hosting Service of GitHub Pages","tags":[],"description":"","content":"Although GitHub Pages is free of charges for an Open Source Project, there are some usage limits. See more details about GitHub Pages here.\n GitHub Pages source repositories have a recommended limit of 1GB. Published GitHub Pages sites may be no larger than 1 GB. GitHub Pages sites have a soft bandwidth limit of 100GB per month. GitHub Pages sites have a soft limit of 10 builds per hour.  Case Studies  In case of WASAC, Rwanda WASAC\u0026rsquo;s Vectortiles data in the whole country is currently only approximately 33MB. So I think our usage should not be a problem. In case of Narok Water, Kenya Narok Water\u0026rsquo;s Vectortiles data is currently only approximately 2MB. So I think our usage should not be a problem.  "},{"uri":"https://docs.water-gis.com/en/operation/costs/cost_basemaps/","title":"Limitation of Base map from third-party map","tags":[],"description":"","content":"Usage of Base map from Mapbox Studio Our vectortiles client application mapbox-gl-js-client is using base map services of Mapbox Studio. Mapbox Studio can provides very beautiful vectortile based OpenStreetMap.\nCurrently, we are using free plan of Mapbox Studio. However, there are also some limits.\n Map Loads for Web : 50,000 request per month  If requests exceed 50,000, they will charge $5 USD per 1000 request. You can see more details about their pricing here.\nCase Studies  Cost Estimation in case of WASAC, Rwanda I estimated the number of page views is approximately 41,400 per month. I estimated 30 days per month because some waterworks need to be done during weekends. However, I don\u0026rsquo;t think all of people will access fully. So, 50,000 requests' limit is still enough.  If WASAC\u0026rsquo;s usage will exceed 50,000 requests, we may consider to change base map services from Mapbox to Maptiler. Maptiler will provide base map for free of charge upto 100,000 requests per month. You can see more details about Maptiler\u0026rsquo;s pricing here.\n   Organization No of Organization No of Users per Organizaiton Total No of Users Page Views per person per day Total PVs per day Estimated PV per month     Districts 30 1 30 3 90 2700   POs 80 5 400 3 1200 36000   WASAC RWSS 1 30 30 3 90 2700   Total 111 36 460 - 1380 41400     Cost Estimation in case of Narok Water, Kenya I estimated the number of page views is approximately 10500 per month. Its capacity is much enough to use within 50,000 page views per month.     Organization No of Organization No of Users per Organizaiton Total No of Users Page Views per person per day Total PVs per day Estimated PV per month     NARWASSCO 1 70 70 5 350 10500    "},{"uri":"https://docs.water-gis.com/en/casestudies/","title":"Case Studies","tags":[],"description":"","content":"Chapter 4 This chapter will show you some case studies of vectortiles implementation in water services providers.\nVector Tiles Based Water Map in Africa This is an overview map for to manage all of vectortiles of water supply system. You can zoom the map and tap any point, so you can see more detailed water supply network data from the link of popup.\nCurrently, the below orgainizations joined and are using vectortiles for their daily works.\n 3 water services providers and 6 water systems from Kenya 1 organization and 1100+ water systems from Rwanda     Narok Water, KENYA WASAC RWSS, RWANDA Nakuru Water, KENYA Nanyuki Water, KENYA  Also, see license page about the license of their map data.\n"},{"uri":"https://docs.water-gis.com/en/casestudies/narok/","title":"Narok Water, Kenya","tags":[],"description":"","content":" Water Supply Map for Narok Water, KENYA since June 2020.     Vectortiles Design for Narok water, Kenya 1. URL of Vectortiles Vectortiles https://narwassco.github.io/vt/tiles/{z}/{x}/{y}.mvt Terrain RGB raster tileset https://narwassco.github.io/rw-terrain/tiles/{z}/{x}/{y}.png  available zoom level: 5 - 15 tile size: 512 it was made from 10m DEM which is generated from SRTM.  Stylefiles  Mapbox Street  https://narwassco.github.io/mapbox-stylefiles/street/style.json  Mapbox Satellite  https://narwassco.github.io/mapbox-stylefiles/satellite/style.json  UNVT  https://narwassco.github.io/mapbox-stylefiles/unvt/style.json License If you want to use their open data, please mention their attiribution.\nCopyright (c) 2020 Narok Water and Serwerage Services Co, Ltd. 2. List of Layers    No Layer Geometry Type Min Zoom Max Zoom Remarks     1 pipeline LineString 10 16 It includes all the types of pipeline, but you may seperate by type of pipe such as main line or secondary line if necessary.   2 meter Point 16 16 It only includes household connections.   3 flowmeter Point 14 16 It only includes flow meters to cover wider range of zoom level than consumer meters.   4 valve Point 15 16 eg. gate valve, sluice valve, air valve, non-return valve, etc.   5 firehydrant Point 15 16 It\u0026rsquo;s firehydrant layer   6 washout Point 15 16 It\u0026rsquo;s washout layer   7 tank Polygon 13 16 Distribution tank layer as Polygon. However, you might need to change geometry type to Point   8 plant Polygon 10 16 It incudes boundries of Water Treatment Plant and Water Intake   9 parcels Polygon 16 16 It is polygon of parcels data which was provided by Narok town planning office.   10 parcels_annotation Point 16 16 We seperated parcel number from other parcel data due to reducing the size of data.   11 village Polygon 10 16 Narok water is zoning some area which is called village, you may change layer name for your company.   12 dma Polygon 13 16 District Metered Area(DMA) for Non-Revenue Water Management   13 point_annotation Point 10 16 We put all the annotation data here if we need to show some label.    In Narok water, although we have a pumping station at the WTP, we don\u0026rsquo;t have layer for pump. I know it is significant for a water company. So, you may need to add a layer for pumping station.\n3. List of Columns for each layers pipeline    No Column Data Type     1 fid Integer   2 pipe_type String   3 pipesize Integer   4 material String   5 constructiondate Date   6 insertdate Date   7 updatedate Date   8 Town String    meter    No Column Data Type     1 fid Integer   2 metertype String   3 diameter String   4 zonecd String   5 connno String   6 installationdate Date   7 status String   8 customer String   9 village String   10 insertdate Date   11 updatedate Date   12 isjica Boolean    flowmeter    No Column Data Type     1 fid Integer   2 metertype String   3 diameter String   4 zonecd String   5 connno String   6 installationdate Date   7 status String   8 customer String   9 village String   10 insertdate Date   11 updatedate Date   12 isjica Boolean    valve    No Column Data Type     1 fid Integer   2 valvetype String   3 diameter String   4 installationdate Date   5 status String   6 insertdate Date   7 updatedate Date   8 isjica Boolean    firehydrant    No Column Data Type     1 fid Integer   2 size String   3 installationdate Date   4 insertdate Date   5 updatedate Date   6 isjica Boolean    washout    No Column Data Type     1 fid Integer   2 size String   3 installationdate Date   4 insertdate Date   5 updatedate Date   6 isjica Boolean    tank    No Column Data Type     1 fid Integer   2 name String   3 capacity Integer   4 servicelocation String   5 material String   6 constructiondate String   7 insertdate Date   8 updatedate Date    plant    No Column Data Type     1 fid Integer   2 name String   3 plant_type String   4 insertdate Date   5 updatedate Date    parcels    No Column Data Type     1 fid Integer   2 parcel_no Integer    parcels_annotation    No Column Data Type     1 fid Integer   2 parcel_no Integer    village    No Column Data Type     1 fid Integer   2 name String   3 area String   4 zone String   5 insertdate Date   6 updatedate Date    dma    No Column Data Type     1 fid Integer   2 name String   3 insertdate Date   4 updatedate Date    point_annotation    No Column Data Type     1 masterid Integer   2 name String   3 layer String    point_annotation layer contains the following layers' annotation.\n tank wtp intake village dma places   Copyright © 2020 Narok Water and Sewerage Services Co., Ltd., KENYA\n"},{"uri":"https://docs.water-gis.com/en/casestudies/wasac/","title":"WASAC, Rwanda","tags":[],"description":"","content":" Water Supply Map for WASAC RWSS, RWANDA since July 2020.  Demo The below is demo image of Water Supply Map for WASAC RWSS    Vectortiles Design for WASAC, Rwanda This is the design of vector tiles for WASAC. You can also see our database design from here.\n1. URL of Vectortiles Vectortiles https://wasac.github.io/vt/tiles/{z}/{x}/{y}.mvt Terrain RGB raster tileset https://wasac.github.io/rw-terrain/tiles/{z}/{x}/{y}.png  available zoom level: 5 - 15 tile size: 512 it was made from 10m DEM which is owned by WASAC.  Stylefiles  Mapbox Street  https://wasac.github.io/mapbox-stylefiles/street/style.json  Mapbox Satellite  https://wasac.github.io/mapbox-stylefiles/satellite/style.json  UNVT  https://wasac.github.io/mapbox-stylefiles/unvt/style.json  Terrain  https://wasac.github.io/mapbox-stylefiles/terrain/style.json Note. This terrain stylefile can work on Mapbox GL JS v2 only.　Mapbox GL JS v2 now became proprietary software, you may be charged some fee by them.\nLicense If you want to use their open data, please mention their attiribution.\nCopyright (c) 2020 Water and Sanitation Corporation, Ltd. 2. List of Layers    No Layer Min Zoom Max Zoom Geometry Type     1 pipeline 11 14 LineString   2 connection 14 14 Point   3 chamber 14 14 Point   4 watersource 12 14 Point   5 reservoir 12 14 Point   6 pumping_station 12 14 Point   7 wss 9 14 Polygon   8 wss_annotation 11 15 Point   9 district 8 14 Polygon   10 district_annotation 8 11 Point   11 sector 10 14 Polygon   12 sector_annotation 10 14 Point   13 cell 13 14 Polygon   14 cell_annotation 13 14 Point   15 village 14 14 Polygon   16 village_annotation 14 14 Point    3. List of Columns for each layers pipeline    No Column Data Type     1 fid Integer   2 material String   3 pipe_size Integer   4 pressure String   5 construction_year Integer   6 rehabilitation_year Integer   7 input_date String    connection    No Column Data Type     1 fid Integer   2 connection_type String   3 no_user Integer   4 water_meter Boolean   5 status String   6 observation String   7 elevation Integer   8 input_date String   9 construction_year Integer   10 rehabilitation_year Integer    chamber    No Column Data Type     1 fid Integer   2 chamber_type String   3 chamber_size String   4 material String   5 status String   6 observation String   7 elevation Integer   8 is_breakpressure Boolean   9 chlorination_unit Boolean   10 construction_year Integer   11 rehabilitation_year Integer   12 input_date String    watersource    No Column Data Type     1 fid Integer   2 source_type String   3 discharge Float   4 water_meter Boolean   5 status String   6 observation String   7 elevation Integer   8 chlorination_unit Boolean   9 source_protected Boolean   10 construction_year Integer   11 rehabilitation_year Integer   12 input_date String    reservoir    No Column Data Type     1 fid Integer   2 reservoir_type String   3 capacity Float   3 material String   4 water_meter Boolean   5 status String   6 observation String   7 elevation Integer   8 is_breakpressure Boolean   9 meter_installation_date String   10 chlorination_unit Boolean   11 construction_year Integer   12 rehabilitation_year Integer   13 input_date String    pumping_station    No Column Data Type     1 fid Integer   2 status String   3 head_pump String   4 power_pump String   5 discharge_pump String   6 pump_type String   7 power_source String   8 no_pump Integer   9 kva String   10 no_generator Integer   11 observation String   12 elevation Integer   13 pump_installation_date String   14 meter_installation_date String   15 capacity_antihummber String   16 water_meter Boolean   17 chlorination_unit Boolean   18 installation_antihummer Boolean   19 construction_year Integer   20 rehabilitation_year Integer   21 input_date String    wss    No Column Data Type     1 wss_id Integer   2 wss_name String   3 wss_type String   4 status String   5 description String    wss_annotation    No Column Data Type     1 wss_id Integer   2 wss_name String    district    No Column Data Type     1 dist_id Integer    district_annotation    No Column Data Type     1 dist_id Integer   2 district String    sector    No Column Data Type     1 sect_id Integer    sector_annotation    No Column Data Type     1 sect_id Integer   2 sector String    cell    No Column Data Type     1 cell_id Integer    cell_annotation    No Column Data Type     1 cell_id Integer   2 cell String    village    No Column Data Type     1 vill_id Integer    village_annotation    No Column Data Type     1 vill_id Integer   2 village String     Copyright © 2020 Water and Sanitation Corporation, Ltd., RWANDA\n"},{"uri":"https://docs.water-gis.com/en/casestudies/nakuru/","title":"Nakuru Water, Kenya","tags":[],"description":"","content":" Water Supply Map for Nakuru Water, KENYA since August 2020.     Vectortiles Design for Nakuru water, Kenya 1. URL of Vectortiles Vectortiles https://nakuruwater.github.io/vt/tiles/{z}/{x}/{y}.mvt Stylefiles  Mapbox Street  https://nakuruwater.github.io/mapbox-stylefiles/street/style.json  Mapbox Satellite  https://nakuruwater.github.io/mapbox-stylefiles/satellite/style.json  UNVT  https://nakuruwater.github.io/mapbox-stylefiles/unvt/style.json License If you want to use their open data, please mention their attiribution.\nCopyright (c) 2020 Nakuru Water and Sanitation Services Co, Ltd.  Copyright © 2020 Nakuru Water and Sanitation Services Co., Ltd., KENYA\n"},{"uri":"https://docs.water-gis.com/en/casestudies/nanyuki/","title":"Nanyuki Water, Kenya","tags":[],"description":"","content":" Water Supply Map for Nanyuki Water, KENYA since 25th September 2020.     Vectortiles Design for Nanyuki water, Kenya 1. URL of Vectortiles Vectortiles https://nawasco.github.io/vt/tiles/{z}/{x}/{y}.mvt Stylefiles  Mapbox Street(clean water)  https://nawasco.github.io/mapbox-stylefiles/street/style.json  Mapbox Satellite(clean water)  https://nawasco.github.io/mapbox-stylefiles/satellite/style.json  Mapbox Street(sewer)  https://nawasco.github.io/mapbox-stylefiles/street/style_sewer.json  Mapbox Satellite(sewer)  https://nawasco.github.io/mapbox-stylefiles/satellite/style_sewer.json  UNVT (combined water and sewer)  https://nawasco.github.io/mapbox-stylefiles/unvt/style.json License If you want to use their open data, please mention their attiribution.\nCopyright (c) 2020 Nanyuki Water and Sewerage Co., Ltd.  Copyright © 2020 Nanyuki Water and Sewerage Co., Ltd., KENYA\n"},{"uri":"https://docs.water-gis.com/en/packages/","title":"Packages and libraries","tags":[],"description":"","content":"Chapter 5 This chapter will show you the list of our open source projects.\nAll of libraries are in Github under MIT license.\n1. Software for Mapbox GL JS client  watergis/mapboxgljs-boilerplate: This is the template of Mapbox GL JS implementation for Water Services Providers with all of customized plugins. watergis/mapbox-gl-legend: Add a simple control that can generate a legend from map style watergis/mapbox-gl-area-switcher: Add a simple control to switch area easier watergis/mapbox-gl-popup: add a simple popup into Mapbox GL JS. watergis/mapbox-gl-export: add a simple control that exports a map as PNG or PDF. watergis/mapbox-gl-pitch-toggle-control: add a simple 3D button to change between 3D and 2D watergis/mapbox-gl-elevation: adds elevation control to mapbox-gl. It relys on terrain RGB raster tilesets.  2. Software for Vectortiles  watergis/vt-boilerplate: a template to create vectortiles from PostGIS and deploy it to Github pages. watergis/postgis2geojson: a module to extract GeoJSON directly from PostGIS. watergis/postgis2mbtiles: a module to extract mbtiles directly from PostGIS. watergis/postgis2mbtiles-docker: a Docker implementation for postgis2mbtiles module. watergis/mbtiles2pbf: a module to convert from mbtiles to pbf(mvt) vectortiles. watergis/postgis2vectortiles: a module to create pbf vectortiles from PostGIS directly. watergis/sprite-creator: a module to create sprite files from SVG icons. watergis/mvt-generator: This module creates MVT tiles directly from PostGIS  3. Software for EPANET  watergis/geojson2inp: a module create INP file from GeoJSON files. watergis/postgis2inp: a module create INP file directly from PostGIS.  4. Software for Elevation  watergis/dem2terrainrgb: a python module to convert DEM to terrain RGB raster tiles. watergis/terrain-rgb: a typescript module to extract elevation from terrain RGB tilesets by longitude and latitude.  "},{"uri":"https://docs.water-gis.com/en/license/","title":"License","tags":[],"description":"","content":"Chapter 6 This chapter will show you the license of our open source projects\n1. License of projects under watergis organization All of libraries are under MIT license.\n 2. License of vectortiles and raster tiles data These vectortiles and raster tiles are licensed under a Creative Commons Attribution 4.0 International License.\n If you want to use their open data, please mention their attiribution. See the license at their case study page.\nAlso, if you want to use our stylefiles together with base map, please put the following additional attribution on your map.\n(c)Mapbox, (c) OpenStreetMap contributors, Powered by the United Nations Vector Tile Toolkit 3. License of Stylefiles and Spritefiles These following stylefiles are licenced under C0-1.0 License. However, we are using some icons of Mapbox Studio. So those icons which are from Mapbox, the license also belong them.\n  narwassco/mapbox-stylefiles: Stylefiles for Narok Water, Kenya WASAC/mapbox-stylefiles: Stylefiles for WASAC, Rwanda. nakuruwater/mapbox-stylefiles: Stylefiles for Nakuru Water, Kenya  These stylefiles and spritefiles are following Mapbox Style Specification.\n"},{"uri":"https://docs.water-gis.com/en/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://docs.water-gis.com/en/credits/","title":"Credits","tags":[],"description":"","content":"Contributors Thanks to them for making Open Source Software a better place !\nAnd a special thanks to the below contributors.\n @JinIgarashi for his work on watergis United Nation Open GIS Initiative\u0026rsquo;s UN Vector Tile Toolkit to support us technically.  Maintenance of Vectortiles data Actual vectortiles datas are owned by their water companies. Vectortiles data are located in following repositories.\n narwassco/vt: Vectortiles for Narok Water, Kenya WASAC/vt: Vectortiles for WASAC, Rwanda nakuruwater/vt: Vectortiles for Nakuru Water, Kenya  Thanks all of officers in the above water services providers to collect and maintain the GIS data.\n"},{"uri":"https://docs.water-gis.com/en/","title":"GIS for Water","tags":[],"description":"","content":"Vector Tiles for Water Management This webiste is to show you our awesome implementations of the Mapbox Vector Tiles for Water Services Providers.\nAlso, we will guide you how to implement vector tiles and to share GIS data in your water services providers.\nWhat is Vector Tiles?  Vector tiles make huge maps fast while offering full design flexibility. They are the vector data equivalent of image tiles for web mapping, applying the strengths of tiling — developed for caching, scaling and serving map imagery rapidly — to vector data. (from Mapbox website).\n Vector Tiles is the most popular and advanced mapping technology currently, its data is very light and fast, offering full design flexibility.\nIts operation cost is normally cheaper compare to raster tiles data distribution.\nIn Africa, Internet connection is still poor in some rural area. Vector Tiles is right solution for such as poor internet situation. You can enjoy browsing smoothly in your computer or smartphones.\nOur vector tiles approach uses Github pages without servers. I know it is quite difficult for some of water services providers to have servers in Africa. This tools were developed for you!\nCase Studies See our case studies of actual water services providers in Africa from Case Studies.\nContribution to this Open Source Project This vectortiles tools were developed and are maintained by Jin IGARASHI.\nPlease let me know through Github\u0026rsquo;s issues or pull request if you have any feedbacks. Also, if you like my GIS works for water services providers in Africa, please support this project through Github Sponsor.\n"},{"uri":"https://docs.water-gis.com/en/questions/","title":"Q&amp;A","tags":[],"description":"","content":"1. How to change the size of pipe? This approach can\u0026rsquo;t allow you to edit any data through vector tiles. Vector tiles is static data, that is why it can provide you smooth access to map data. So you have to update the attributes of data from Desktop GIS software such as QGIS or ArcGIS.\n 2. How vector tiles can reduce NRW? Actually, there is still no good experience for reducing NRW. However, if we can share the GIS data widely with all of colleagues, I think it will help water utility manage NRW more efficient.\nBy the way, I am also trying to add new function to integrate EPANET on this WebGIS application. If you can see the result of EPANET simulation, it will be so helpful.\n 3. I\u0026rsquo;m not sure that I understood well about vector tiles. To create vector tile data, the source data on pipelines should be existed in some database form? Yes, your GIS data must be stored in certain GIS database. It creates vector tiles tilesets directly from GIS database. This approach uses PostgreSQL/PostGIS because its database is open source. However, you can modify the source code for other database if you are using SQL Server, Oracle and others.\n 4. Does it work offline? Can people view it once they download in the mobile phone or PC? (Like maps.me) Unfortunately, this is online web application, so you can\u0026rsquo;t see offline. However, you can download mbtiles tilesets to your Android devices, so offline viewing can be available by using QField or INPUT app.\n 5. How can this vector tiles be used in case of water distribution network development projects? In Rwanda, we includes some statistics information in vector tiles. So, all of staffs can see any required information for planning water facilities. It can be used for future developments.\n 6. What is the main advantage of Vector Tile over QGIS? Most of water utilities' GIS administrator actually asked me about editing funcitons. However, WebGIS includes editing is normally extremely expensive. This approach delegated all of editing functions to QGIS side. So, the graphical user interface become very simple and easy to use by other people. You can save a lot of development and training costs.\n 7. To open the data to everybody have some troubles in praivacy. How do you solve this problem? That is true, if you open some data to public, it will be dangerous sometimes. So you must consider which types of data can be published as open data. In Rwanda\u0026rsquo;s case, we deleted all of privacy information such as client name. In Narok water\u0026rsquo;s case, we deleted searching funciton by client name because of security issue. When you design your own vector tiles, first you should discuss which types of data you can publish.\n 8. Is google maps used as the base map? No, you can\u0026rsquo;t use Google Maps as base map. Because Google Maps has very restricted license and normally very expensive to use. However, we can use open street map based map which are provided by Mapbox, MapTiler or United Nation Vector Tiles. Also, you can overlay your own base map data on OSM. For instance, in Rwanda and Kenya, we added parcels data of Land Authority on OSM map. It will help most of water utilities especially when they connect new houlsehold meters.\n"},{"uri":"https://docs.water-gis.com/en/showcase/","title":"Showcase","tags":[],"description":"","content":"The following websites are the final outputs of vector tiles maps for water sevices providers in both Kenya and Rwanda which are using this vector tiles toolkit.\nYou will see how this vectortiles is powerful for your water services providers.\n Narok Water, KENYA WASAC RWSS, RWANDA Nakuru Water, KENYA Nanyuki Water, KENYA  "},{"uri":"https://docs.water-gis.com/en/tags/","title":"Tags","tags":[],"description":"","content":""},{"uri":"https://docs.water-gis.com/en/tools/","title":"Thirdparty Tools","tags":[],"description":"","content":"The following tools are maybe useful for your implementation of vector tiles\nStyle file editor  Mapbox Studio: You can upload mbtiles and edit your own style. it\u0026rsquo;s the best style editor although it can\u0026rsquo;t allow us to use third party sources. Maputnik Editor: You can edit your own style for any thirdparty vector tiles sources. Maptiler: You can upload mbtiles and edit your own style simply. However, you can combine to use Maptile and Maputnik Editor, it will be more flexible.  Generating Vector Tiles  mapbox/tippecanoe: You can generate mbtiles from GeoJSON files. QGIS: QGIS supports vector tiles from 3.14. You can generate vector tiles from any format by GUI. unvt(United Nation Vector Tiles Toolkit): UNVT Toolkits might guide you how to implement vecor tiles.  "}]